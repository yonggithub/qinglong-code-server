## 开始执行... 2022-01-28 23:26:14

=====> 开始检测
---> 1. 复制通知文件

---> 复制一份 /ql/sample/notify.py 为 /ql/scripts/notify.py

'/ql/sample/notify.py' -> '/ql/scripts/notify.py'

---> 复制一份 /ql/sample/notify.js 为 /ql/scripts/sendNotify.js

'/ql/sample/notify.js' -> '/ql/scripts/sendNotify.js'
---> 通知文件复制完成

---> 2. 复制nginx配置文件

'/ql/docker/nginx.conf' -> '/etc/nginx/nginx.conf'
'/ql/docker/front.conf' -> '/etc/nginx/conf.d/front.conf'
---> 配置文件复制完成


=====> 检测面板

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"
    />
    <link rel="shortcut icon" type="image/x-icon" href="/images/g5.ico" />
    <link rel="stylesheet" href="/umi.f778bd55.css" />
    <script>
      window.routerBase = "/";
    </script>
    <script>
      //! umi version: 3.5.20
    </script>
  </head>
  <body>
    <div id="root"></div>

    <script src="https://gw.alipayobjects.com/os/lib/react/16.13.1/umd/react.production.min.js"></script>
    <script src="https://gw.alipayobjects.com/os/lib/react-dom/16.13.1/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.zhimg.com/darkreader@4.9.40/darkreader.js"></script>
    <script src="https://unpkg.zhimg.com/codemirror@5/lib/codemirror.js"></script>
    <script src="https://unpkg.zhimg.com/codemirror@5/mode/shell/shell.js"></script>
    <script src="https://unpkg.zhimg.com/codemirror@5/mode/python/python.js"></script>
    <script src="https://unpkg.zhimg.com/codemirror@5/mode/javascript/javascript.js"></script>
    <script src="https://unpkg.zhimg.com/sockjs-client@1/dist/sockjs.min.js"></script>
    <script src="/umi.df88f575.js"></script>
  </body>
</html>

=====> 面板服务启动正常

=====> 检测nginx服务
root        42     1  0 23:25 ?        00:00:00 nginx: master process nginx -c /etc/nginx/nginx.conf
root        43    42  0 23:25 ?        00:00:00 nginx: worker process
root        44    42  0 23:25 ?        00:00:00 nginx: worker process
root        45    42  0 23:25 ?        00:00:00 nginx: worker process
root        46    42  0 23:25 ?        00:00:00 nginx: worker process

=====> nginx服务正常

---> pm2日志

=====> 检测后台



=====> 后台服务异常，重置基础环境并重启后台

---> 1. 开始检测配置文件

---> 配置文件检测完成

---> 2. 开始安装青龙依赖

检测到 /ql 的依赖包有变化，运行 npm install...

Lockfile is up-to-date, resolution step is skipped
Progress: resolved 1, reused 0, downloaded 0, added 0
Packages: +359
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Packages are hard linked from the content-addressable store to the virtual store.
  Content-addressable store is at: /config/.pnpm-store/v3
  Virtual store is at:             node_modules/.pnpm
.../sqlite3@5.0.2/node_modules/sqlite3 install$ node-pre-gyp install --fallback-to-build
.../sqlite3@5.0.2/node_modules/sqlite3 install: node-pre-gyp info it worked if it ends with ok
.../sqlite3@5.0.2/node_modules/sqlite3 install: node-pre-gyp info using node-pre-gyp@0.11.0
.../sqlite3@5.0.2/node_modules/sqlite3 install: node-pre-gyp info using node@14.18.1 | linux | x64
Progress: resolved 359, reused 359, downloaded 0, added 359, done
.../sqlite3@5.0.2/node_modules/sqlite3 install: node-pre-gyp WARN Using request for node-pre-gyp https download 
.../sqlite3@5.0.2/node_modules/sqlite3 install: node-pre-gyp info check checked for "/ql/node_modules/.pnpm/sqlite3@5.0.2/node_modules/sqlite3/lib/binding/napi-v3-linux-x64/node_sqlite3.node" (not found)
.../sqlite3@5.0.2/node_modules/sqlite3 install: node-pre-gyp http GET https://mapbox-node-binary.s3.amazonaws.com/sqlite3/v5.0.2/napi-v3-linux-x64.tar.gz
.../sqlite3@5.0.2/node_modules/sqlite3 install: node-pre-gyp http 200 https://mapbox-node-binary.s3.amazonaws.com/sqlite3/v5.0.2/napi-v3-linux-x64.tar.gz
.../sqlite3@5.0.2/node_modules/sqlite3 install: node-pre-gyp info install unpacking napi-v3-linux-x64/node_sqlite3.node
.../sqlite3@5.0.2/node_modules/sqlite3 install: node-pre-gyp info tarball done parsing tarball
.../sqlite3@5.0.2/node_modules/sqlite3 install: node-pre-gyp info ok 
.../sqlite3@5.0.2/node_modules/sqlite3 install: [sqlite3] Success: "/ql/node_modules/.pnpm/sqlite3@5.0.2/node_modules/sqlite3/lib/binding/napi-v3-linux-x64/node_sqlite3.node" is installed via remote
.../sqlite3@5.0.2/node_modules/sqlite3 install: Done

dependencies:
+ @otplib/preset-default 12.0.1
+ @sentry/node 6.17.2
+ @sentry/tracing 6.17.2
+ body-parser 1.19.1
+ celebrate 13.0.4
+ chokidar 3.5.3
+ cors 2.8.5
+ cron-parser 3.5.0
+ dotenv 8.6.0
+ express 4.17.2
+ express-jwt 6.1.0
+ express-urlrewrite 1.4.0
+ got 11.8.3
+ hpagent 0.1.2
+ iconv-lite 0.6.3
+ jsonwebtoken 8.5.1
+ lodash 4.17.21
+ nedb 1.8.0
+ node-fetch 2.6.7
+ node-schedule 2.1.0
+ nodemailer 6.7.2
+ p-queue 6.6.2
+ reflect-metadata 0.1.13
+ sequelize 7.0.0-next.1
+ serve-handler 6.1.3
+ sockjs 0.3.24
+ sqlite3 5.0.2
+ typedi 0.8.0
+ uuid 8.3.2
+ winston 3.5.0
+ yargs 17.3.1

 WARN  "prepare" script of "@" inside "/ql" is skipped as the working directory seems suspicious. To run this lifecycle script anyway, use "--unsafe-perm".
---> 青龙依赖安装完成

---> 3. 开始安装脚本依赖

检测到 /ql/scripts 的依赖包有变化，运行 npm install...

Lockfile is up-to-date, resolution step is skipped
Progress: resolved 1, reused 0, downloaded 0, added 0
Packages: +211
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Packages are hard linked from the content-addressable store to the virtual store.
  Content-addressable store is at: /ql/scripts/.pnpm-store/v3
  Virtual store is at:             node_modules/.pnpm

dependencies:
+ crypto-js 4.1.1
+ download 8.0.0
+ got 11.8.3
+ http-server 0.12.3
+ qrcode-terminal 0.12.0
+ request 2.88.2
+ tough-cookie 4.0.0
+ tunnel 0.0.6
+ ws 7.5.6

Progress: resolved 211, reused 211, downloaded 0, added 211, done
---> 脚本依赖安装完成


=====> 检测结束


## 执行结束... 2022-01-28 23:26:29  耗时 15 秒
